//
//  DetailView.swift
//  TripBuddy
//
//  Created by ÍπÄÎèôÍ≤Ω on 9/24/24.
//

import SwiftUI

extension View {
    func offsetY(completion: @escaping (CGFloat, CGFloat) -> Void) -> some View {
        self
            .modifier(OffsetHelper(onChange: completion))
    }
}


struct OffsetHelper: ViewModifier {
    
    
    var onChange: (CGFloat, CGFloat) -> Void
    @State var currentOffset: CGFloat = 0
    @State var previousOffset: CGFloat = 0
    
    func body(content: Content) -> some View {
        content
            .overlay {
                GeometryReader { geometry in
                    let minY = geometry.frame(in: .named("SCROLL")).minY
                    Color.clear
                        .preference(key: OffsetKey.self, value: minY)
                        .onPreferenceChange(OffsetKey.self) { value  in
                            previousOffset = currentOffset
                            currentOffset = value
                            onChange(previousOffset, currentOffset)
                        }
                }
            }
        
    }
}


struct OffsetKey: PreferenceKey {
    static var defaultValue: CGFloat = 0
    
    static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {
        value = nextValue()
    }
    
}

struct DetailView: View {
    

    @State private var isNavigationActive = false // ÎèôÌñâÏûê ÌîÑÎ°úÌïÑ ÎàÑÎ•ºÏãú ÎßàÏù¥ÌéòÏù¥ÏßÄÎ∑∞ Ïù¥Îèô
    @StateObject private var detailMyPageViewModel = DetailMyPageViewModel()
    @State private var partnerManager: PartnerCheckManager = .init() //ÏùºÏ†ïÏùÑ ÎèôÌñâÏûêÎßå Î≥ºÏàòÏûàÍ≤å? ÏÉùÍ∞ÅÏ§ë(ÏïÑÏßÅ ÏÇ¨Ïö© ÏïàÌï®)
    @State private var toast: Toast?
    @State private var navigateToChatDetailView: Bool = false
    @State private var navigaToScheduleView: Bool = false
    @State private var scrollOffsetValue: CGFloat = 0 //Ïä§ÌÅ¨Î°§ Í∞í
    @State private var isVisibleAlert: Bool = false //Ïã†Í≥†ÌïòÍ∏∞ Î≤ÑÌäº Ïï°ÏÖòÏñºÎüø
    @State private var isDeclarationAlert: Bool = false
    @State private var isHeart: Bool = false//Ï¢ãÏïÑÏöî
    @State private var showingDetailMyPage: Bool = false
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        GeometryReader { proxy in
            ZStack(alignment: .top) {
                Image(.busan2)
                    .resizable()
                    .frame(width: proxy.size.width, height: proxy.size.height * 0.35)
                    .allowsHitTesting(false) // Ïù¥ÎØ∏ÏßÄ ÏûêÏ≤¥Îäî ÌÑ∞Ïπò Ïù¥Î≤§Ìä∏Î•º Î∞õÏßÄ ÏïäÏùå
                    .ignoresSafeArea()
                
                
                ScrollView {
                    VStack(alignment: .leading) {
                        //Ïú†Ï†Ä ÌîÑÎ°úÌïÑ
                        UserProfileSection()
                        
                        Spacer()
                            .frame(height: 20)
                        
                        //Ï†úÎ™© Î∞è Î≥∏Î¨∏
                        TextSection()
                        
                        //Ïó¨Ìñâ ÏùºÏ†ï
                        ScheduleSection()
                        
                        //Ïó¨Ìñâ Ï°∞Í±¥
                        ContidionSection()
                        
                        //Ï∞∏Ïó¨Ï§ëÏù∏ ÎèôÌñâ
                        ParticipantSection()
                        
                        
                        
                        
                        Spacer()
                            .frame(height: proxy.size.height * 0.3)
                    }
                    .padding(.horizontal)
                    .background(Color.white)
                    .clipShape(UnevenRoundedRectangle(topLeadingRadius: 42, topTrailingRadius: 42))
                    .shadow(radius: 2) //Í∑∏Î¶ºÏûêÎ•º ÎÑ£Ïñ¥Ïïº ÌïòÎÇò ÎßêÏïÑÏïº ÌïòÎÇò..
                    .offset(y: proxy.size.height * 0.18)
                    .offsetY { previous, current in
                        //Í∏∞Í∏∞ÎßàÎã§ Ïä§ÌÅ¨Î°§ Í∞íÏù¥ Îã§Î•∏Í∞Ä? current = Ïä§ÌÅ¨Î°§ offsetY Í∞í
                        print(current)
                        withAnimation {
                            scrollOffsetValue = current
                        }
                    }
                    
                }//Ïä§ÌÅ¨Î°§ ÎÅù
                .coordinateSpace(name: "SCROLL")
                
                if scrollOffsetValue > -120 {
                    TopBarIcons()
                        .transition(.opacity)
                }
                
            }
            .sheet(isPresented: $showingDetailMyPage) {
                DetailMyPageView(viewModel: detailMyPageViewModel)
                    .presentationDetents([.medium, .large])
            }
            .toastView(toast: $toast)
            .overlay(alignment: .bottom) {
                Button {
                    partnerManager.partnerState = .partner
                    navigateToChatDetailView.toggle()
                } label: {
                    Text("ÎèôÌñâ Ï∞∏Ïó¨ÌïòÍ∏∞")
                        .modifier(ButtonModifier(color: .basic, disabled: false))
                        .padding(.horizontal)
                        .font(.custom("Pretendard-regular", size: 18))
                }
            }
            .navigationBarBackButtonHidden()
            .alert("Ïù¥ Í≤åÏãúÎ¨ºÏùÑ Ï†ïÎßê Ïã†Í≥† ÌïòÏãúÍ≤†ÏäµÎãàÍπå?", isPresented: $isDeclarationAlert, actions: {
                Button("Ï∑®ÏÜå", role: .cancel){}
                Button("Ïã†Í≥†", role: .destructive){}
            })
            .confirmationDialog("Ïã†Í≥†", isPresented: $isVisibleAlert, actions: {
                Button("Ïã†Í≥†", role: .destructive) {
                    isDeclarationAlert.toggle()
                }
            })
            .frame(maxWidth: proxy.size.width, maxHeight: proxy.size.height)
            .navigationDestination(isPresented: $navigaToScheduleView) {
                DetailScheduleView()
            }
            .navigationDestination(isPresented: $navigateToChatDetailView) {
                ChatRoomDetailView(
                chatRoom: ChatRoom(name: "ÎÜçÎã¥Í≥∞", imageName: "JokeBear", tripName: "Î∂ÄÏÇ∞", memberCount: 5, lastMessage: "Ï†ÄÎÖÅ Î®πÏóàÎãà?", timestamp: "8:15", area: "ÏßÄÍµ¨", chatCount: "100+"))
            }
            
        }
    }
    
    @ViewBuilder
    func TopBarIcons() -> some View {
        HStack {
            Button {
                dismiss()
            } label: {
                Image(systemName: "chevron.left")
                    .font(.title)
                    .tint(.white)
            }
            
            Spacer()
            
            Button {
                isVisibleAlert.toggle()
            } label: {
                Image(systemName: "info.circle")
                    .font(.title2)
                    .tint(.white)
            }
        }
        .padding()
    }
    
    @ViewBuilder
    func TextSection() -> some View {
        
        Text("Î∂ÄÏÇ∞ Ïó¨Ìñâ Í∞ôÏù¥ Í∞ÄÏã§ Î∂Ñ~")
            .font(.custom("Pretendard-Bold", size: 20))
            .padding(.bottom)
        
        Text("ÏïàÎÖïÌïòÏÑ∏Ïöî üëã\n\nÎ∂ÄÏÇ∞ ÎèºÏßÄ Íµ≠Î∞• Î®πÏúºÎü¨ Í∞ÄÏã§ Î∂Ñ Íµ¨Ìï¥Ïöî~\nÌï¥Ïö¥ÎåÄÎèÑ Í∞ôÏù¥ Í∞ÄÏÑú Î∞îÎã§ Î¥êÏöî\n\nÌòÑÏû¨ Ïó¨Ïûê 1, ÎÇ®Ïûê 1Î∂Ñ ÏûàÏäµÎãàÎã§.\nÌé∏ÌïòÍ≤å Ïó∞ÎùΩ Ï£ºÏÑ∏Ïöî~")
            .font(.custom("Pretendard-regular", size: 17))
            .lineSpacing(1)
            .padding(.bottom, 24)
    }
    
    @ViewBuilder
    func UserProfileSection() -> some View {
        HStack(alignment: .center) {
            Image(.guri)
                .resizable()
                .scaledToFit()
                .frame(maxWidth: 55)
            
            
            VStack(alignment:.leading, spacing: 4) {
                Text("Îã¨Îã¨Íµ¨Î¶¨")
                    .font(.custom("Pretendard-regular", size: 17))
                
                Text("24ÏÑ∏ | Ïó¨Ïûê")
                    .font(.custom("Pretendard-regular", size: 13))
                    .foregroundStyle(.secondary)
            }
            
            Spacer()
            
            Button {
                isHeart.toggle()
            } label: {
                Image(systemName: isHeart ? "heart.fill" : "heart")
                    .tint(isHeart ? .red : .secondary)
                    .font(.title2)
            }
            .padding(.trailing, 10)
        }
        .padding(.top, 20)
    }
    
    @ViewBuilder
    func ScheduleSection() -> some View {
        Text("Ïó¨Ìñâ ÏùºÏ†ï")
            .font(.custom("Pretendard-Medium", size: 18))
        
        Button {
            if partnerManager.partnerState == .none {
                toast = Toast(message: "ÎèôÌñâ Î©§Î≤ÑÎßå ÌôïÏù∏ Í∞ÄÎä•Ìï©ÎãàÎã§.")
            } else {
                navigaToScheduleView.toggle()
            }
        } label: {
            HStack(alignment: .center) {
                VStack(alignment: .leading) {
                    HStack {
                        Image(systemName: "calendar")
                            .tint(Color(.darkGray))
                        
                        Text("09.24 ~ 09.27")
                            .foregroundStyle(.black)
                    }
                    .padding(.horizontal)
                    .padding(.top, 12)
                    .padding(.bottom, 3)
                    
                    HStack {
                        Image(systemName: "map")
                            .tint(Color(.darkGray))
                        
                        Text("Î∂ÄÏÇ∞ Ìï¥Ïö¥ÎåÄ")
                            .foregroundStyle(.black)
                    }
                    .padding(.horizontal)
                    .padding(.top, 3)
                    .padding(.bottom, 12)
                    
                }
                .font(.custom("Pretendard-regular", size: 16))
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.title2)
                    .tint(.gray)
                    .padding()
            }
            .background(Color(.systemGray6))
            .clipShape(RoundedRectangle(cornerRadius: 18))
            
        }
    }
    
    @ViewBuilder
    func ContidionSection() -> some View {
        Text("Ïó¨Ìñâ Ï°∞Í±¥")
            .font(.custom("Pretendard-Medium", size: 18))
            .padding(.top, 32)
        
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Image(systemName: "person.fill")
                    .frame(maxWidth: 35)
                
                Text("ÏÑ±Î≥Ñ Î¨¥Í¥Ä, 20ÎåÄ")
            }
            .font(.custom("Pretendard-regular", size: 16))
            .padding(.horizontal, 3)
            
            
            HStack {
                Image(systemName: "number")
                    .frame(maxWidth: 35)
                
                Text("ÌôúÎ∞ú, Í∏çÏ†ï, ÌÖêÏÖò")
            }
            .font(.custom("Pretendard-regular", size: 16))
            .padding(.horizontal, 3)
            
            HStack {
                Image(systemName: "wonsign")
                    .frame(maxWidth: 35)
                
                Text("Ïù∏Îãπ 80,000Ïõê")
            }
            .font(.custom("Pretendard-regular", size: 16))
            .padding(.horizontal, 3)
        }
        .padding(.vertical, 1)
    }
    
    @ViewBuilder
    func ParticipantSection() -> some View {
        HStack(alignment: .bottom) {
            Text("Ï∞∏Ïó¨ Ï§ëÏù∏ ÎèôÌñâ")
                .font(.custom("Pretendard-Medium", size: 18))
            
            Text("3/4")
                .foregroundStyle(.secondary)
                .font(.custom("Pretendard-regular", size: 14))
        }
        .padding(.top, 32)
        
        HStack(alignment: .center) {
            VStack(alignment: .center) {
                Button {
                    showingDetailMyPage.toggle()
                } label: {
                    Image(.guri)
                        .resizable()
                        .scaledToFit()
                        .frame(maxWidth: 50)
                }
                Text("Îã¨Îã¨Íµ¨Î¶¨")
                    .font(.custom("Pretendard-regular", size: 14))
                    .foregroundStyle(Color(.darkGray))
            }
            .padding(.vertical)
            .padding(.leading, 20)
            
            
            VStack(alignment: .center) {
                Button {
                    showingDetailMyPage.toggle()
                } label: {
                    Image(.bear)
                        .resizable()
                        .scaledToFit()
                        .frame(maxWidth: 50)
                }
                Text("ÎπºÍºº")
                    .font(.custom("Pretendard-regular", size: 14))
                    .foregroundStyle(Color(.darkGray))
            }
            .padding(.vertical)
            .padding(.leading, 10)
            
            VStack(alignment: .center) {
                Button {
                    showingDetailMyPage.toggle()
                } label: {
                    Image(.pepe)
                        .resizable()
                        .scaledToFit()
                        .frame(maxWidth: 50)
                }
                Text("ÌéòÌéò")
                    .font(.custom("Pretendard-regular", size: 14))
                    .foregroundStyle(Color(.darkGray))
            }
            .padding(.vertical)
            .padding(.leading, 10)
            
            Spacer()
        }
        .background(Color(.systemGray6))
        .clipShape(RoundedRectangle(cornerRadius: 18))
        
      
    }
}

#Preview {
    NavigationStack {
        DetailView()
            .environmentObject(PartnerCheckManager())
    }
}
